name: CI

on:
  push:

jobs:
  check:
    name: Check (Rust ${{ matrix.rust }})
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        rust:
          - stable
          - beta
        experimental: [false]
        include:
          - rust: nightly
            experimental: true
    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
      SCCACHE_CACHE_SIZE: 1G
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Install sccache
        env:
          SCCACHE_VERSION: 0.2.15
        # Roughly based on https://www.fluvio.io/blog/2021/04/github-actions-best-practices/
        run: |
          BASE_LINK=https://github.com/mozilla/sccache/releases/download
          SCCACHE_ARCHIVE=sccache-v$SCCACHE_VERSION-x86_64-unknown-linux-musl
          mkdir -p "$HOME/.local/bin"
          curl -L "$BASE_LINK/v$SCCACHE_VERSION/$SCCACHE_ARCHIVE.tar.gz" \
            | tar xz --strip-components=1 --directory="$HOME/.local/bin" $SCCACHE_ARCHIVE/sccache
          chmod +x "$HOME/.local/bin/sccache"
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        id: install_rust
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          profile: minimal
          components: clippy, rustfmt
          target: x86_64-unknown-linux-musl
      - name: Cache Cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/git
            ~/.cargo/registry
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-rust-${{ matrix.rust }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-rust-
            ${{ runner.os }}-cargo-
      - name: Cache sccache artifacts
        uses: actions/cache@v2
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-rust-${{ steps.install_rust.outputs.rustc_hash }}-sccache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-rust-${{ steps.install_rust.outputs.rustc_hash }}-sccache-
      - name: Start sccache server
        run: sccache --start-server
      - name: Check formatting
        run: cargo fmt -- --check
      - name: Check and lint
        run: cargo clippy --verbose --locked --all-features
      - name: Build release binary
        if: matrix.rust == 'stable'
        run: cargo build --verbose --locked --all-features --release --target x86_64-unknown-linux-musl
      - name: Strip binary
        if: matrix.rust == 'stable'
        run: strip target/x86_64-unknown-linux-musl/release/xbgdump
      - name: Upload binary
        if: matrix.rust == 'stable'
        uses: actions/upload-artifact@v2
        with:
          name: xbgdump
          path: target/x86_64-unknown-linux-musl/release/xbgdump
      - name: Stop sccache server
        run: sccache --stop-server || true
      - name: Save version
        run: |
          cargo metadata --format-version 1 | jq -r '.packages[] | select(.name == "xbgdump") | .version' > VERSION
      - name: Upload version
        uses: actions/upload-artifact@v2
        with:
          name: version
          path: VERSION

  verify-version:
    name: Verify version parity between Git and Cargo.toml
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: check
    steps:
      - name: Download version file
        uses: actions/download-artifact@v2
        with:
          name: version
      - name: Verify version parity
        run: |
          CARGO_VERSION=$(cat VERSION)
          GIT_VERSION=${GITHUB_REF#refs/tags/}
          [ "x$CARGO_VERSION" = "x$GIT_VERSION" ]

  release:
    name: Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: verify-version
    steps:
      - name: Download binary
        uses: actions/download-artifact@v2
        with:
          name: xbgdump
      - name: Create release
        uses: marvinpinto/actions-automatic-releases@v1.2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          # We probably want to edit the body text and stuff manually
          # CI's job is primarily to provide the pre-built binary
          draft: true
          files: xbgdump

  crates:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: verify-version
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
      - name: Publish crate
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        # --no-verify because we've already tried building it at this point
        run: cargo publish --verbose --locked --no-verify
